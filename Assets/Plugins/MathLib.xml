<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathLib</name>
    </assembly>
    <members>
        <member name="T:MathLib.Base">
            <summary>
            Contains extensions for base in number representations.
            </summary>
        </member>
        <member name="M:MathLib.Base.IsPurelyPeriodic(System.Int32,MathLib.Q)">
            <summary>
            Checks if the given rational number is purely periodic in the current base.
            </summary>
            <param name="base_">The base.</param>
            <param name="q">The rational number to check.</param>
            <returns><see langword="true"/> <c>iff</c> the rational number is purely periodic.</returns>
        </member>
        <member name="M:MathLib.Base.Pow(System.Int32,System.Int32)">
            <summary>
            Raises the base to the specified exponent.
            </summary>
            <param name="base_">The base.</param>
            <param name="exponent">The exponent.</param>
            <returns>The result of raising the base to the exponent.</returns>
        </member>
        <member name="T:MathLib.BaseInt">
            <summary>
            Represents an immutable base-specific integer of a fixed length, that supports zero-padding.
            </summary>
            <remarks>
            A <see cref="T:MathLib.BaseInt"/> is fully defined by its integer value, base and length. 
            Shifting and other operations are applied with respect to the specified base, and the length is preserved.
            </remarks>
        </member>
        <member name="P:MathLib.BaseInt.Base">
            <summary>
            Gets the base of the <see cref="T:MathLib.BaseInt"/>.
            </summary>
        </member>
        <member name="P:MathLib.BaseInt.Length">
            <summary>
            Gets the length of the <see cref="T:MathLib.BaseInt"/>.
            </summary>
        </member>
        <member name="P:MathLib.BaseInt.IntValue">
            <summary>
            Integer value of the <see cref="T:MathLib.BaseInt"/> in descending order.
            </summary>
            <remarks>
            This value is always stored descending order, regardless of the base's natural order.
            This makes it compliant with arithmetic operations of the <see cref="T:System.Numerics.BigInteger"/> type.
            <para>For ascending order, the value is reversed when the <see cref="T:MathLib.BaseInt"/> is created.</para>
            </remarks>
        </member>
        <member name="M:MathLib.BaseInt.#ctor(System.Int32,System.Numerics.BigInteger,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathLib.BaseInt"/> struct.
            </summary>
            <param name="base_">The base of the <see cref="T:MathLib.BaseInt"/>.</param>
            <param name="intValue">The integer value.</param>
            <param name="length">An optional length of the <see cref="T:MathLib.BaseInt"/>. Default is the minimum required length of <paramref name="intValue"/> in the given base.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the integer value is negative or the base is less than 2.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when an explicit <paramref name="length"/> is specified that is less than minimum required length of <paramref name="intValue"/> (in the given base).</exception>
        </member>
        <member name="M:MathLib.BaseInt.Reverse">
            <summary>
            Returns a new <see cref="T:MathLib.BaseInt"/> where the coefficients are reversed.
            </summary>
            <remarks>
            The coefficients are reversed such that the most significant becomes the least significant, and vice versa.
            As a result, the outputs of <see cref="M:MathLib.BaseInt.Coefficients"/> is reversed, 
            compared to the original instance.
            </remarks>
            <returns>A new <see cref="T:MathLib.BaseInt"/> with reversed coefficients.</returns>
        </member>
        <member name="P:MathLib.BaseInt.First">
            <summary>
            Gets the first (most significant) coefficient.
            </summary>
        </member>
        <member name="P:MathLib.BaseInt.Last">
            <summary>
            Gets the last (least significant) coefficient.
            </summary>
        </member>
        <member name="P:MathLib.BaseInt.IsZero">
            <summary>
            Indicates whether the <see cref="T:MathLib.BaseInt"/> is zero.
            </summary>
        </member>
        <member name="M:MathLib.BaseInt.Coefficients">
            <summary>
            Returns the coefficients in current base in descending order of significance.
            </summary>
            <returns>An enumerable sequence of coefficients from most to least significant.</returns>
        </member>
        <member name="M:MathLib.BaseInt.CoefficientsDescending">
            <summary>
            Returns the coefficients in current base in descending order of significance.
            </summary>
            <returns>An enumerable sequence of coefficients from most to least significant.</returns>
        </member>
        <member name="M:MathLib.BaseInt.CoefficientsAscending(System.Int32,System.Numerics.BigInteger,System.Int32)">
            <summary>
            Returns the coefficients from least significant to most significant.
            </summary>
            <returns>An enumerable sequence of coefficients from least to most significant.</returns>
        </member>
        <member name="M:MathLib.BaseInt.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:MathLib.BaseInt.Equals(MathLib.BaseInt)">
            <inheritdoc/>
        </member>
        <member name="M:MathLib.BaseInt.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MathLib.BaseInt.CompareTo(MathLib.BaseInt)">
            <inheritdoc/>
        </member>
        <member name="M:MathLib.BaseInt.AssertSameBaseAs(MathLib.BaseInt)">
            <summary>
            Asserts that the current <see cref="T:MathLib.BaseInt"/> has the same base as the specified <see cref="T:MathLib.BaseInt"/>.
            </summary>
            <param name="other">The <see cref="T:MathLib.BaseInt"/> to compare the base with.</param>
            <returns>The current <see cref="T:MathLib.BaseInt"/> if the bases are equal.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the bases are not equal.</exception>
        </member>
        <member name="M:MathLib.BaseInt.op_LeftShift(MathLib.BaseInt,System.Int32)">
            <summary>
            Shifts the <see cref="T:MathLib.BaseInt"/> left by the specified number of positions.
            </summary>
            <remarks>
            <para>The length of the <see cref="T:MathLib.BaseInt"/> is preserved.</para>
            Positions vacated on the right are zero-padded. 
            <para>Coefficients truncated on the left are discarded.</para>
            </remarks>
            <param name="baseInt">The <see cref="T:MathLib.BaseInt"/> to shift.</param>
            <param name="shift">The number of positions to shift.</param>
            <returns>A new <see cref="T:MathLib.BaseInt"/> shifted left by <paramref name="shift"/> positions.</returns>
        </member>
        <member name="M:MathLib.BaseInt.op_RightShift(MathLib.BaseInt,System.Int32)">
            <summary>
            Shifts the <see cref="T:MathLib.BaseInt"/> right by the specified number of positions.
            </summary>
            <remarks>
            <para>The length of the <see cref="T:MathLib.BaseInt"/> is preserved.</para>
            <para>Positions vacated on the left are zero-padded.</para>
            <para>Coefficients truncated on the right are discarded.</para>
            </remarks>
            <param name="baseInt">The <see cref="T:MathLib.BaseInt"/> to shift.</param>
            <param name="shift">The number of positions to shift.</param>
            <returns>A new <see cref="T:MathLib.BaseInt"/> shifted right by <paramref name="shift"/> positions.</returns>
        </member>
        <member name="M:MathLib.BaseInt.op_Equality(MathLib.BaseInt,MathLib.BaseInt)">
            <summary>
            Indicates whether two <see cref="T:MathLib.BaseInt"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <param name="right">The second <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the two <see cref="T:MathLib.BaseInt"/> objects are equal.</returns>
        </member>
        <member name="M:MathLib.BaseInt.op_Inequality(MathLib.BaseInt,MathLib.BaseInt)">
            <summary>
            Indicates whether two <see cref="T:MathLib.BaseInt"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <param name="right">The second <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the two <see cref="T:MathLib.BaseInt"/> objects are not equal.</returns>
        </member>
        <member name="M:MathLib.BaseInt.op_LessThan(MathLib.BaseInt,MathLib.BaseInt)">
            <summary>
            Indicates whether the first <see cref="T:MathLib.BaseInt"/> object is less than the second <see cref="T:MathLib.BaseInt"/> object.
            </summary>
            <param name="left">The first <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <param name="right">The second <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the first <see cref="T:MathLib.BaseInt"/> object is less than the second <see cref="T:MathLib.BaseInt"/> object.</returns>
        </member>
        <member name="M:MathLib.BaseInt.op_LessThanOrEqual(MathLib.BaseInt,MathLib.BaseInt)">
            <summary>
            Indicates whether the first <see cref="T:MathLib.BaseInt"/> object is less than or equal to the second <see cref="T:MathLib.BaseInt"/> object.
            </summary>
            <param name="left">The first <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <param name="right">The second <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the first <see cref="T:MathLib.BaseInt"/> object is less than or equal to the second <see cref="T:MathLib.BaseInt"/> object.</returns>
        </member>
        <member name="M:MathLib.BaseInt.op_GreaterThan(MathLib.BaseInt,MathLib.BaseInt)">
            <summary>
            Indicates whether the first <see cref="T:MathLib.BaseInt"/> object is greater than the second <see cref="T:MathLib.BaseInt"/> object.
            </summary>
            <param name="left">The first <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <param name="right">The second <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the first <see cref="T:MathLib.BaseInt"/> object is greater than the second <see cref="T:MathLib.BaseInt"/> object.</returns>
        </member>
        <member name="M:MathLib.BaseInt.op_GreaterThanOrEqual(MathLib.BaseInt,MathLib.BaseInt)">
            <summary>
            Indicates whether the first <see cref="T:MathLib.BaseInt"/> object is greater than or equal to the second <see cref="T:MathLib.BaseInt"/> object.
            </summary>
            <param name="left">The first <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <param name="right">The second <see cref="T:MathLib.BaseInt"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the first <see cref="T:MathLib.BaseInt"/> object is greater than or equal to the second <see cref="T:MathLib.BaseInt"/> object.</returns>
        </member>
        <member name="T:MathLib.BigIntegerExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.Numerics.BigInteger"/> struct, enabling additional functionality
            such as determining whether a number is odd, computing its absolute value, and calculating its bit length.
            It also provides the Extended Euclidean algorithm for computing GCD and Bézout coefficients.
            </summary>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.IsOdd(System.Numerics.BigInteger)">
            <summary>
            Indicates whether the specified <see cref="T:System.Numerics.BigInteger"/> value is odd.
            </summary>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> value to check.</param>
            <returns><see langword="true"/> <c>iff</c><paramref name="integer"/> is odd.</returns>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.Abs(System.Numerics.BigInteger)">
            <summary>
            Absolute value of the specified <paramref name="integer"/> value.
            </summary>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> value whose absolute value is to be computed.</param>
            <returns>A <see cref="T:System.Numerics.BigInteger"/> representing the absolute value of the input.</returns>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.Coprime(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Indicates whether two specified <see cref="T:System.Numerics.BigInteger"/> values are coprime.
            </summary>
            <param name="a">The first <see cref="T:System.Numerics.BigInteger"/> value.</param>
            <param name="b">The second <see cref="T:System.Numerics.BigInteger"/> value.</param>
            <returns><see langword="true"/> <c>iff</c> <paramref name="a"/> and <paramref name="b"/> are coprime.</returns>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.IsDivisibleBy(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Indicates whether the specified <see cref="T:System.Numerics.BigInteger"/> value is divisible by the specified divisor.
            </summary>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> value to check.</param>
            <param name="divisor">The divisor to check against.</param>
            <returns><see langword="true"/> <c>iff</c> the value is divisible by the divisor.</returns>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.Mod(System.Numerics.BigInteger,System.Numerics.BigInteger)">
             <summary>
             Computes the modulus of a <see cref="T:System.Numerics.BigInteger"/> in the same way as in languages like 
             Python, Haskell, Julia and Matlab.
             The result follows the mathematical definition of modulus where the remainder always has the same sign as 
             the divisor, ensuring predictable results for both positive and negative values.
             </summary>
             <remarks>
             The result of the modulus operation is adjusted based on the sign of <paramref name="modulus"/>:
             <para>When <paramref name="modulus"/> is positive, the result is in the range [0, modulus)</para>
             <para>When <paramref name="modulus"/> is negative, the result is in the range (modulus, 0].</para>
            
             This method provides consistent behavior for modulus operations, similar to how it is implemented 
             in Python, Haskell, Julia, and Matlab.
             </remarks>
             <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> value to compute the modulus for.</param>
             <param name="modulus">The modulus value. Must be non-zero.</param>
             <returns>
             The remainder when <paramref name="integer"/> is divided by <paramref name="modulus"/>, adjusted to 
             follow the same sign as <paramref name="modulus"/>.
             </returns>
             <example>
             <para>Examples:</para>
             <code>
             BigInteger result1 = new BigInteger(10).Mod(3);  // 1
             BigInteger result2 = new BigInteger(-10).Mod(3); // 2
             BigInteger result3 = new BigInteger(10).Mod(-3); // -2
             BigInteger result4 = new BigInteger(-10).Mod(-3); // -1
             </code>
             </example>
             <exception cref="T:System.DivideByZeroException">
             Thrown when <paramref name="modulus"/> is zero.
             </exception>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.LCM(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Returns the Least Common Multiple of two integers
            </summary>
            <example>LCM(4, 6) = 12, since 12 is both a multiple of 4 (4*3) and a multiple of 6 (6*2) </example>
            <param name="first">The first integer</param>
            <param name="second">The second integer</param>
            <returns>LCM of <paramref name="first"/> and <paramref name="second"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="first"/> or <paramref name="second"/> is zero.
            </exception>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.Length(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Returns the number of coefficients (or digits) required to represent this  
            <see cref="T:System.Numerics.BigInteger"/> in a specified base.
            </summary>
            <remarks>
            If this <see cref="T:System.Numerics.BigInteger"/> is <c>0</c>, the result is always <c>0</c>, regardless of the base.
            <para>If this <see cref="T:System.Numerics.BigInteger"/> is negative, the result will be the same as for its absolute value.</para>
            <para>If the base <paramref name="base_"/> is less than <c>2</c>, this method returns <c>0</c>, 
            following the behavior of <see cref="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)"/>.</para>
            </remarks>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> to calculate the coefficient count for.</param>
            <param name="base_">The base in which this <see cref="T:System.Numerics.BigInteger"/> will be represented. Must be greater than <c>1</c> for meaningful results.</param>
            <returns><para>The number of coefficients required to represent this <see cref="T:System.Numerics.BigInteger"/> in base <paramref name="base_"/>.</para>
            <para><c>0</c> if <paramref name="base_"/> is less than <c>2</c>.</para></returns>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.IsPowerOf(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Indicates whether the specified <see cref="T:System.Numerics.BigInteger"/> value is a power of the specified exponent.
            </summary>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> value to check.</param>
            <param name="exponent">The exponent to check against.</param>
            <returns><see langword="true"/> <c>iff</c> the value is a power of the exponent.</returns>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.ModularInverse(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Computes the modular inverse of a number <paramref name="integer"/> under a given modulus <paramref name="modulus"/>.
            </summary>
            <remarks>
            The modular inverse of <paramref name="integer"/> modulo <paramref name="modulus"/> is a number <c>x</c> such that:
            <code>
            integer ⋅ x ≡ 1 (mod modulus)
            </code>
            This method uses the Extended Euclidean Algorithm to compute the inverse. 
            <para>The result of this method is always in the range [0, <paramref name="modulus"/>), as it is normalized by applying the modulus operation.</para>
            </remarks>
            <param name="integer">The number for which the modular inverse is to be computed. Must be greater than or equal to 1.</param>
            <param name="modulus">The modulus under which the inverse is computed. Must be greater than or equal to 2.</param>
            <returns>
            The modular inverse of <paramref name="integer"/> modulo <paramref name="modulus"/>. 
            The result is normalized to be within the range [0, <paramref name="modulus"/>).
            </returns>
            <example>
            <code>
            BigInteger result1 = new BigInteger(3).ModularInverse(7);  // 5
            BigInteger result2 = new BigInteger(2).ModularInverse(11); // 6
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="integer"/> is less than 1 <c>or</c> if <paramref name="modulus"/> is less than 2.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="integer"/> and <paramref name="modulus"/> are not coprime, i.e., if the greatest common divisor of the two is not 1.
            </exception>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.ExtendedEuclideanAlgorithm(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Implements the extended Euclidean algorithm to compute the greatest common divisor (GCD) of two <see cref="T:System.Numerics.BigInteger"/> values
            and the corresponding Bézout coefficients.
            </summary>
            <remarks>
            For two integers <paramref name="a"/> and <paramref name="b"/>, this method computes the GCD, denoted as gcd(a, b),
            and finds integers 'x' and 'y' such that Bézout's identity is satisfied:
            <code>
            a·x + b· y = gcd(a, b)
            </code>
            </remarks>
            <param name="a">The first <see cref="T:System.Numerics.BigInteger"/>.</param>
            <param name="b">The second <see cref="T:System.Numerics.BigInteger"/>.</param>
            <returns>
            A tuple containing three <see cref="T:System.Numerics.BigInteger"/> values:
            <list type="bullet">
            <item>
            <description>
            The greatest common divisor (gcd) of <paramref name="a"/> and <paramref name="b"/>.
            </description>
            </item>
            <item>
            <description>
            The Bézout coefficient 'x' (corresponding to <paramref name="a"/> in Bézout's identity).
            </description>
            </item>
            <item>
            <description>
            The Bézout coefficient 'y' (corresponding to <paramref name="b"/> in Bézout's identity).
            </description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:MathLib.BigIntegerExtensions.Parse(System.String,System.Int32)">
            <summary>
            Parses the string representation of a number in the specified base to its <see cref="T:System.Numerics.BigInteger"/> equivalent.
            </summary>
            <param name="input">The string representation of the number to parse. It may start with a '-' to indicate a negative number.</param>
            <param name="fromBase">The base of the input number, ranging from 2 to 36.</param>
            <returns>A <see cref="T:System.Numerics.BigInteger"/> representation of the parsed value.</returns>
            <example>
            <code>
            Console.WriteLine(Parse("-10.011", 2));  //outputs "-19/8"
            </code>
            </example>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fromBase"/> is not within 2 to 36.</exception>
        </member>
        <member name="T:MathLib.Cp">
            <summary>
            Represents the field of complex p-adic numbers, denoted ℂₚ in mathematics.
            </summary>
            <remarks>
            ℂₚ is the algebraic closure and completion of ℚₚ with respect to the p-adic norm. It contains all solutions to 
            algebraic equations over ℚₚ, as well as transcendental numbers. Thus, ℂₚ generalizes ℚₚ by extending it to 
            include both algebraic and transcendental elements.
            <para>
            ℂₚ contains the following sets of numbers:
            <list type="bullet">
            <item><description>ℚ: All rational numbers.</description></item>
            <item><description>ℚₚ: All ultimately periodic p-adic numbers.</description></item>
            <item><description>ℂ: All complex numbers, including imaginary numbers like √(-1).</description></item>
            <item><description>All algebraic numbers over ℚₚ.</description></item>
            </list>
            </para>
            ℂₚ is closed under addition, subtraction, multiplication, division, exponentiation, logarithms, and square roots. 
            It supports all operations on complex numbers within the p-adic framework.
            </remarks>
            <example>
            The square root of -1 does not exist in ℚₚ but exists in ℂₚ, yielding the imaginary unit i.
            <para>A 5-adic expansion for the rational number i (√-1) is:</para>
            <code>
            √(-1) = i = "…04240422331102414131141421404340423140223032431212"₅ (no repeating pattern)
            </code>
            </example>
        </member>
        <member name="T:MathLib.EnumerableExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:MathLib.EnumerableExtensions.Str``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Joins the elements of the enumerable into a string, separated by the specified delimiter.
            </summary>
            <typeparam name="T">The type of the elements in the enumerable.</typeparam>
            <param name="source">The enumerable to join.</param>
            <param name="delimiter">The delimiter to insert between each element. Defaults to an empty string.</param>
            <returns>A string with the joined elements.</returns>
        </member>
        <member name="T:MathLib.Lib">
            <summary>
            Static class for general assembly methods
            </summary>
        </member>
        <member name="P:MathLib.Lib.BuildVersion">
            <summary>
            Retrieves assebly information. 
            </summary>
            <returns>
            A string representing the version, target .NET framework, and build configuration (e.g. Debug, Release) of the assembly.
            The format of the returned string is "Version: 'X.Y.Z.W' Build:'FrameworkName' Configuration:'BuildConfiguration'".
            </returns>
            <example>
            <code>
            Console.WriteLine(Lib.BuildVersion);
            // Example output:
            // "Version: 1.0.0.0 Build:.NET Standard 2.1 Configuration:Release"
            </code>
            </example>
        </member>
        <member name="T:MathLib.PAdics.ModP">
            <summary>
            Represents an element in the finite field GF(p), where p is a prime number.
            This class supports arithmetic operations modulo p, including addition, subtraction,
            multiplication, and division. These operations are performed in the context of a 
            Galois field, ensuring that the results stay within the finite field.
            </summary>
        </member>
        <member name="P:MathLib.PAdics.ModP.N">
            <summary>
            The value of the element in the finite field GF(p).
            </summary>
        </member>
        <member name="P:MathLib.PAdics.ModP.P">
            <summary>
            The prime modulus p defining the finite field GF(p).
            </summary>
        </member>
        <member name="M:MathLib.PAdics.ModP.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:MathLib.PAdics.ModP"/> class, representing
            an element in the finite field GF(p).
            </summary>
            <param name="n">The value of the element.</param>
            <param name="p">The prime modulus p that defines the finite field GF(p).</param>
            <exception cref="T:System.ArgumentException">Thrown when p is not a prime number.</exception>
        </member>
        <member name="M:MathLib.PAdics.ModP.op_Addition(MathLib.PAdics.ModP,MathLib.PAdics.ModP)">
            <summary>
            Adds two elements in the finite field GF(p).
            </summary>
            <param name="a">An element in the finite field GF(p).</param>
            <param name="b">Another element in the finite field GF(p).</param>
            <returns>The sum of the two elements, also an element of GF(p).</returns>
            <example>
            <code>
            var a = new ModP(3, 5);
            var b = new ModP(4, 5);
            var result = a + b; // result is 2 in GF(5)
            </code>
            </example>
        </member>
        <member name="M:MathLib.PAdics.ModP.op_Subtraction(MathLib.PAdics.ModP,MathLib.PAdics.ModP)">
            <summary>
            Subtracts one element from another in the finite field GF(p).
            </summary>
            <param name="a">An element in the finite field GF(p).</param>
            <param name="b">Another element in the finite field GF(p).</param>
            <returns>The difference of the two elements, also an element of GF(p).</returns>
            <example>
            <code>
            var a = new ModP(3, 5);
            var b = new ModP(4, 5);
            var result = a - b; // result is 4 in GF(5)
            </code>
            </example>
        </member>
        <member name="M:MathLib.PAdics.ModP.op_Multiply(MathLib.PAdics.ModP,MathLib.PAdics.ModP)">
            <summary>
            Multiplies two elements in the finite field GF(p).
            </summary>
            <param name="a">Ab element in the finite field GF(p).</param>
            <param name="b">Another element in the finite field GF(p).</param>
            <returns>The product of the two elements, also an element of GF(p).</returns>
            <example>
            <code>
            var a = new ModP(3, 5);
            var b = new ModP(4, 5);
            var result = a * b; // result is 2 in GF(5)
            </code>
            </example>
        </member>
        <member name="M:MathLib.PAdics.ModP.op_Division(MathLib.PAdics.ModP,MathLib.PAdics.ModP)">
            <summary>
            Divides one element by another in the finite field GF(p).
            </summary>
            <param name="a">Ab element in the finite field GF(p).</param>
            <param name="b">Another element in the finite field GF(p).</param>
            <returns>The quotient of the two elements, also an element of GF(p).</returns>
            <exception cref="T:System.DivideByZeroException">Thrown when attempting to divide by zero.</exception>
            <example>
            <code>
            var a = new ModP(3, 5);
            var b = new ModP(4, 5);
            var result = a / b; // result is 2 in GF(5)
            </code>
            </example>
        </member>
        <member name="M:MathLib.PAdics.ModP.Inverse">
            <summary>
            Computes the multiplicative inverse of this element in the finite field GF(p).
            </summary>
            <returns>The multiplicative inverse of this element, which, when multiplied by the original element, 
            results in 1 in the finite field GF(p). This operation is essential in division within the field.
            </returns>
            <exception cref="T:System.DivideByZeroException">
            Thrown when the element is zero because zero does not have a multiplicative inverse.
            </exception>
            <example>
            <code>
            var a = new ModP(3, 5);
            var inverse = a.Inverse(); // inverse is 2 in GF(5) because 3 * 2 % 5 = 1
            </code>
            </example>
            <remarks>
            The multiplicative inverse of an element "a" in a finite field GF(p) is another element "b" such that 
            the product of "a" and "b" is congruent to 1 modulo p. For example, in GF(5), the multiplicative inverse 
            of 3 is 2 because (3 * 2) % 5 = 1. This method uses the Extended Euclidean Algorithm to find such an element.
            </remarks>
        </member>
        <member name="M:MathLib.PAdics.ModP.Equals(System.Object)">
            <summary>
            Indicates whether the specified element is equal to the current element.
            </summary>
            <param name="obj">Another element to compare with.</param>
            <returns><see langword="true"/> <c>iff</c> the elements are equal.</returns>
        </member>
        <member name="M:MathLib.PAdics.ModP.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:MathLib.PAdics.ModP.ToString">
            <summary>
            Returns a string that represents the current element.
            </summary>
            <returns>A string that represents the current element in the format "n % p".</returns>
            <example>
            <code>
            var a = new ModP(3, 5);
            Console.WriteLine(a); // Outputs "3 % 5"
            </code>
            </example>
        </member>
        <member name="M:MathLib.PAdics.ModP.IsPrime(System.Numerics.BigInteger)">
            <summary>
            Indicates whether a given number is prime.
            </summary>
            <param name="number">The number to check.</param>
            <returns><see langword="true"/> <c>iff</c> the number is prime.</returns>
        </member>
        <member name="T:MathLib.Prime.Factorization">
            <summary>
            Represents the prime factorization of an integer, which may be partial.
            Handles composite remainder factors and negative integers.
            </summary>
            <remarks>
            This class is immutable. The factorization is initialized via a primary constructor that accepts
            the prime factors and the remainder factor.
            </remarks>
        </member>
        <member name="F:MathLib.Prime.Factorization.PrimeFactors">
            <summary>
            The prime factors in ascending order. True primes (meaning all are positive).
            </summary>
        </member>
        <member name="F:MathLib.Prime.Factorization.RemainderFactor">
            <summary>
            The remainder after factoring, which may be composite if the factorization is partial.
            If the input was negative, the remainder is also negative.
            </summary>
        </member>
        <member name="M:MathLib.Prime.Factorization.#ctor(System.Int32[],System.Numerics.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:MathLib.Prime.Factorization"/> class.
            </summary>
            <param name="primeFactors">An array of prime factors in ascending order.</param>
            <param name="remainderFactor">
            The remainder after factoring, which may be composite or negative.
            If the input integer is negative, the remainder factor carries the negative sign.
            </param>
        </member>
        <member name="P:MathLib.Prime.Factorization.IsComplete">
            <summary>
            Indicates if the factorization is complete (RemainderFactor is ±1).
            </summary>
        </member>
        <member name="P:MathLib.Prime.Factorization.IsZero">
            <summary>
            Indicates if the factored number is zero.
            </summary>
        </member>
        <member name="P:MathLib.Prime.Factorization.IsOne">
            <summary>
            Indicates if the factored number is one.
            </summary>
        </member>
        <member name="P:MathLib.Prime.Factorization.FactorCount">
            <summary>
            The total count of factors, including the remainder if it is not ±1.
            </summary>
        </member>
        <member name="M:MathLib.Prime.Factorization.Equals(MathLib.Prime.Factorization)">
            <summary>
            Indicates if this factorization is equal to another.
            </summary>
            <param name="other">The factorization to compare with.</param>
            <returns><see langword="true"/> <c>iff</c> this instance is equal to the <paramref name="other"/>.</returns>
        </member>
        <member name="M:MathLib.Prime.Factorization.Equals(System.Object)">
            <summary>
            Indicates if this object is equal to another.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns><see langword="true"/> <c>iff</c> equal to <paramref name="obj"/>.</returns>
        </member>
        <member name="M:MathLib.Prime.Factorization.GetHashCode">
            <summary>
            Computes the hash code for this factorization.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:MathLib.Prime.Factorization.FactoredInteger">
            <summary>
            Recreates the original integer from the prime factors and remainder factor.
            </summary>
        </member>
        <member name="M:MathLib.Prime.Factorization.ToString">
            <summary>
            Returns a string representation of the factorization, including the prime factors and remainder.
            </summary>
            <returns>A string representing the factorization.</returns>
        </member>
        <member name="T:MathLib.Prime.PrimeGenerator">
            <summary>
            Generation of primes using a segmented sieve algorithm.
            </summary>
            <remarks>
            The <see cref="T:MathLib.Prime.PrimeGenerator"/> class uses a segmented sieve algorithm to efficiently generate prime numbers. 
            The algorithm is designed to be cache-friendly by processing primes in segments or "pages", which helps in 
            reducing memory usage and improving performance. This implementation is particularly useful for generating 
            a large number of primes.
            </remarks>
        </member>
        <member name="M:MathLib.Prime.PrimeGenerator.GeneratePrimes">
            <summary>
            Generates an enumerable sequence of prime numbers.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of prime numbers.</returns>
            <remarks>
            This method uses a segmented sieve algorithm to generate prime numbers. The algorithm divides the range 
            of numbers into smaller segments and processes each segment individually. This approach helps in keeping 
            the memory footprint low and improves cache performance.
            
            The first prime number (2) is yielded separately, and subsequent primes are generated and yielded as the 
            algorithm processes each segment.
            </remarks>
        </member>
        <member name="T:MathLib.Prime.Primes">
            <summary>
            Provides operations related to primes, such as factorization
            </summary>
            <remarks>
            The method <see cref="M:MathLib.Prime.Primes.Factorization(System.Numerics.BigInteger)"/> uses a highly parallelized algorithm. 
            Since it will utilize all available cores, it will (for reduced context-switching and maximum performance) enforce only serial
            execution between separate calls to the method. 
            
            The class does not consume any memory before being activated. This happens if either one of the main operations are called, 
            or via an explicit call to <see cref="M:MathLib.Prime.Primes.Prepare(System.Action)"/>
            </remarks>
        </member>
        <member name="F:MathLib.Prime.Primes.factorizationLock">
            <summary>
            Lock to enforce only one factorization method running at a time
            </summary>
        </member>
        <member name="F:MathLib.Prime.Primes.MaxSupportedPrime">
            <summary>
            The maximum prime supported in factorization.
            </summary>
        </member>
        <member name="M:MathLib.Prime.Primes.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathLib.Prime.Primes"/> class.
            </summary>
            <param name="maxPrime">The maximum prime number supported. Default value is <see cref="F:MathLib.Prime.Primes.MaxSupportedPrime"/>.</param>
            <param name="threadCount">The number of threads to use for generating prime numbers. Default value is -1, which means it will use the number of processors available in the system.</param>
        </member>
        <member name="P:MathLib.Prime.Primes.IsReady">
            <summary>
            Gets a value indicating whether the Primes instance is ready. All calls to this class will be queued until instance is ready
            </summary>
        </member>
        <member name="M:MathLib.Prime.Primes.Prepare(System.Action)">
            <summary>
            Prepares the Primes instance for use in the background. 
            </summary>
            <remarks>
            This method returns instantly.
            If <see cref="M:MathLib.Prime.Primes.Prepare(System.Action)"/> is not called, everything will still work perfectly, 
            but the first operation could take longer to complete.
            
            </remarks>
            <param name="instanceReadyCallback">An optional callback to be invoked when the instance is ready.</param>
        </member>
        <member name="M:MathLib.Prime.Primes.Factorization(System.Numerics.BigInteger)">
            <summary>
            Performs the prime factorization of a given integer.
            </summary>
            <param name="integer">The integer to be factorized.</param>
            <returns>A <see cref="M:MathLib.Prime.Primes.Factorization(System.Numerics.BigInteger)"/> object containing the prime factors and a remaining factor (that can be 1).</returns>
            <seealso cref="M:MathLib.Prime.Primes.Factorization(System.Numerics.BigInteger)"/>
        </member>
        <member name="T:MathLib.Q">
            <summary>
            Represents the set of rational numbers, denoted by ℚ in mathematics.
            </summary>
            <remarks>
            The set of rational numbers is defined as the set of all numbers that can be expressed as the quotient of two integers, 
            where the denominator is non-zero. Formally:
            
            <para>ℚ = {a / b | a ∈ ℤ, b ∈ ℤ, b ≠ 0}</para>
            Rational numbers include integers, fractions, and terminating or repeating decimal expansions. 
            Many operations, such as addition, subtraction, multiplication, and division (excluding division by zero) 
            are closed within ℚ.
            
            <para>Rational numbers can be embedded within the set of real numbers ℝ, and the set of p-adic numbers ℚₚ. 
            They serve as the foundation for more complex number systems.</para>
            
            In this library, the class <see cref="T:MathLib.Q"/> represents the mathematical structure of rational numbers, 
            and serves as a base for more advanced number fields like <see cref="T:MathLib.Qp"/> and <see cref="T:MathLib.Cp"/>.
            <para>The class methods must never throw exceptions from arithmetic operations. 
            Instead, they return <see cref="P:MathLib.Q.NaN"/> for undefined results (such as from divide by zero).</para>
            </remarks>
        </member>
        <member name="P:MathLib.Q.IsNaN">
            <summary>
            Indicates whether the rational number is NaN (not a number), indicated by a zero denominator.
            </summary>
        </member>
        <member name="P:MathLib.Q.IsZero">
            <summary>
            Indicates whether the rational number is zero.
            </summary>
        </member>
        <member name="P:MathLib.Q.IsOne">
            <summary>
            Indicates whether the rational number is equal to one.
            </summary>
        </member>
        <member name="P:MathLib.Q.IsPositive">
            <summary>
            Indicates whether the rational number is positive.
            </summary>
        </member>
        <member name="P:MathLib.Q.IsNegative">
            <summary>
            Indicates whether the rational number is negative.
            </summary>
        </member>
        <member name="P:MathLib.Q.IsInteger">
            <summary>
            Indicates whether the rational number is an integer.
            </summary>
        </member>
        <member name="P:MathLib.Q.IsNonZeroInteger">
            <summary>
            Indicates whether the rational number is a non-zero integer.
            </summary>
        </member>
        <member name="P:MathLib.Q.IsPositiveInteger">
            <summary>
            Indicates whether the rational number is a positive integer.
            </summary>
        </member>
        <member name="P:MathLib.Q.IsNegativeInteger">
            <summary>
            Indicates whether the rational number is a negative integer.
            </summary>
        </member>
        <member name="P:MathLib.Q.IsUnitFraction">
            <summary>
            Indicates whether the rational number is a unit fraction.
            </summary>
            <remarks>
            Unit fractions are strictly positive, meaning <c>-1/10</c> is not a unit fraction.
            </remarks>
        </member>
        <member name="M:MathLib.Q.op_Equality(MathLib.Q,MathLib.Q)">
            <summary>
            Indicates whether two rational numbers are equal.
            </summary>
            <param name="a">The first rational number.</param>
            <param name="b">The second rational number.</param>
            <returns><see langword="true"/> <c>iff</c> the two rational numbers are equal.</returns>
        </member>
        <member name="M:MathLib.Q.op_Inequality(MathLib.Q,MathLib.Q)">
            <summary>
            Indicates whether two rational numbers are not equal.
            </summary>
            <param name="a">The first rational number.</param>
            <param name="b">The second rational number.</param>
            <returns><see langword="true"/> <c>iff</c> the two rational numbers are not equal.</returns>
        </member>
        <member name="M:MathLib.Q.Equals(MathLib.Q)">
            <summary>
            Indicates whether the current rational number is equal to another rational number.
            </summary>
            <param name="other">The rational number to compare with.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is equal to the specified rational number.</returns>
        </member>
        <member name="M:MathLib.Q.CompareTo(MathLib.Q)">
            <summary>
            Compares the current rational number to another rational number.
            </summary>
            <param name="other">The rational number to compare with.</param>
            <returns>An integer that indicates the relative order of the current rational number and the specified rational number.</returns>
        </member>
        <member name="M:MathLib.Q.CompareTo(System.Numerics.BigInteger)">
            <summary>
            Compares the current rational number to a <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> to compare with.</param>
            <returns>An integer that indicates the relative order of the current rational number and the specified <see cref="T:System.Numerics.BigInteger"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Equality(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Indicates whether the current rational number is equal to a specified <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <param name="q">The rational number to compare.</param>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is equal to <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Inequality(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Indicates whether the current rational number is not equal to a specified <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <param name="q">The rational number to compare.</param>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> to compare.</param>
            <returns><see langword="true"/> if the current rational number is not equal to the specified <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_LessThan(MathLib.Q,MathLib.Q)">
            <summary>
            Indicates whether the current rational number is less than another rational number.
            </summary>
            <param name="a">The first rational number.</param>
            <param name="b">The second rational number.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is less than the specified rational number.</returns>
        </member>
        <member name="M:MathLib.Q.op_LessThanOrEqual(MathLib.Q,MathLib.Q)">
            <summary>
            Indicates whether the current rational number is less than or equal to another rational number.
            </summary>
            <param name="a">The first rational number.</param>
            <param name="b">The second rational number.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is less than or equal to the specified rational number</returns>
        </member>
        <member name="M:MathLib.Q.op_GreaterThan(MathLib.Q,MathLib.Q)">
            <summary>
            Indicates whether the current rational number is greater than another rational number.
            </summary>
            <param name="a">The first rational number.</param>
            <param name="b">The second rational number.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is greater than the specified rational number.</returns>
        </member>
        <member name="M:MathLib.Q.op_GreaterThanOrEqual(MathLib.Q,MathLib.Q)">
            <summary>
            Indicates whether the current rational number is greater than or equal to another rational number.
            </summary>
            <param name="a">The first rational number.</param>
            <param name="b">The second rational number.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is greater than or equal to the specified rational number.</returns>
        </member>
        <member name="M:MathLib.Q.op_LessThan(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Indicates whether the current rational number is less than a <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <param name="q">The current rational number.</param>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is less than the specified integer.</returns>
        </member>
        <member name="M:MathLib.Q.op_LessThanOrEqual(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Indicates whether the current rational number is less than or equal to a <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <param name="q">The current rational number.</param>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is less than or equal to the specified integer.</returns>
        </member>
        <member name="M:MathLib.Q.op_GreaterThan(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Indicates whether the current rational number is greater than a <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <param name="q">The current rational number.</param>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is greater than the specified integer.</returns>
        </member>
        <member name="M:MathLib.Q.op_GreaterThanOrEqual(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Indicates whether the current rational number is greater than or equal to a <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <param name="q">The current rational number.</param>
            <param name="integer">The <see cref="T:System.Numerics.BigInteger"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is greater than or equal to the specified integer.</returns>
        </member>
        <member name="M:MathLib.Q.CompareTo(System.Int32)">
            <summary>
            Compares the current rational number to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="integer">The <see cref="T:System.Int32"/> to compare with.</param>
            <returns>An integer that indicates the relative order of the current rational number and <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Equality(MathLib.Q,System.Int32)">
            <summary>
            Indicates whether the current rational number is equal to a specified <see cref="T:System.Int32"/>.
            </summary>
            <param name="q">The rational number to compare.</param>
            <param name="integer">The <see cref="T:System.Int32"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is equal to the specified <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Inequality(MathLib.Q,System.Int32)">
            <summary>
            Indicates whether the current rational number is not equal to a specified <see cref="T:System.Int32"/>.
            </summary>
            <param name="q">The rational number to compare.</param>
            <param name="integer">The <see cref="T:System.Int32"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is not equal to <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_LessThan(MathLib.Q,System.Int32)">
            <summary>
            Indicates whether the current rational number is less than an <see cref="T:System.Int32"/>.
            </summary>
            <param name="q">The current rational number.</param>
            <param name="integer">The <see cref="T:System.Int32"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is less than <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_LessThanOrEqual(MathLib.Q,System.Int32)">
            <summary>
            Indicates whether the current rational number is less than or equal to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="q">The current rational number.</param>
            <param name="integer">The <see cref="T:System.Int32"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is less than or equal to the specified integer.</returns>
        </member>
        <member name="M:MathLib.Q.op_GreaterThan(MathLib.Q,System.Int32)">
            <summary>
            Indicates whether the current rational number is greater than a specified <see cref="T:System.Int32"/>.
            </summary>
            <param name="q">The current rational number.</param>
            <param name="integer">The <see cref="T:System.Int32"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is greater than the specified <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_GreaterThanOrEqual(MathLib.Q,System.Int32)">
            <summary>
            Indicates whether the current rational number is greater than or equal to a specified <see cref="T:System.Int32"/>.
            </summary>
            <param name="q">The current rational number.</param>
            <param name="integer">The <see cref="T:System.Int32"/> to compare.</param>
            <returns><see langword="true"/> <c>iff</c> the current rational number is greater than or equal to <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.Equals(System.Object)">
            <summary>
            Indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><see langword="true"/> <c>iff</c> the current instance is equal to the specified object <paramref name="obj"/>.</returns>
        </member>
        <member name="M:MathLib.Q.GetHashCode">
            <summary>
            Returns the hash code for the current instance.
            </summary>
            <returns>A hash code for the current instance.</returns>
        </member>
        <member name="P:MathLib.Q.Numerator">
            <summary>
            The numerator of the rational number.
            </summary>
        </member>
        <member name="P:MathLib.Q.Denominator">
            <summary>
            The denominator of the rational number, guaranteed to be positive in normalized form.
            </summary>
        </member>
        <member name="P:MathLib.Q.IntegralPart">
            <summary>
            The integral (integer) part of a rational number
            </summary>
            <remarks>
            In general mathematics, the concept of "integral part" is not objectively defined, since it has two possible interpretations (or modes).
            These interpretations are defined by whether we regard the set of all pure fractions to include the number 1 or not.
            We denote these interpretations (modes), as FIO (Fractions Include One) and FEO (Fractions Exclude One), respectively.
            <para>For instance, in decimal, the number 1 could have the following two interpretations:</para>
            <code> 
            1 = 0.999999... (FIO)
            1 = 1.000000... (FEO)
            </code>
            <para>In FIO the number 1 is a purely fractional number, with integral part=0 and fractional part=1.</para>
            <para>In FEO the number 1 is a purely integral number, with integral part=1 and fractional part=0.</para>
            <para>Irrespective of the mode, any number is always the sum of its integral and fractional parts.</para>
            <para>In FIO, all numbers will have a non-zero-terminating expansion.</para>
            <para>In FEO, any number that can terminate (with an ultimately infinite expansion of zeros) will do so.</para>
            <para>Only numbers with a period of 0, can have different representations in FIO and FEO.</para>
            <para>To make <see cref="P:MathLib.Q.IntegralPart"/> and <see cref="P:MathLib.Q.FractionalPart"/> well defined, yet allow access to both FIO and FEO,
            we assign FIO to all positive numbers, and FEO to all negative numbers and zero. This will make all members of Q have only one correct expansion.</para>
            <para>This whole logic is completely governed by the implementation of <see cref="P:MathLib.Q.IntegralPart"/>.
            Hence, we do not need to manage modes anywhere in the code base.
            </para>
            </remarks>
            <example>
            <list type="table">
              <listheader>
                <term><see cref="T:MathLib.Q"/></term>
                <term>Expansion</term>
                <term>Mode</term>
              </listheader>
              <item>
                <term>0</term>
                <description>.0000000000000000</description>
                <description>FIO=FEO, in any base</description>
              </item>
              <item>
                <term>1₂</term>
                <description>.1111111111111111</description>
                <description>FIO</description>
              </item>
              <item>
                <term>-1₂</term>
                <description>1.000000000000000 </description>
                 <description>FEO</description>
              </item>
              <item>
                <term>103/16₂</term>
                <description>110.0110111111111</description>
                <description>FIO</description>
              </item>
              <item>
                <term>-103/16₂</term>
                <description>110.0111000000000</description>
                <description>FEO</description>
              </item>
              <item>
                <term>5/24₂</term>
                <description>.0011010101010101</description>
                 <description>FIO=FEO</description>
              </item>
              <item>
                <term>-5/24₂</term>
                <description>.0011010101010101</description>
                <description>FIO=FEO</description>
              </item>
              <item>
                <term>3/45₅</term>
                <description>.3333333333333333</description>
                <description>FIO=FEO</description>
              </item>
              <item>
                <term>-3/45₅</term>
                <description>.3333333333333333</description> 
                <description>FIO=FEO</description>
              </item>
              <item>
                <term>537/11₃</term>
                <description>1210.211002110021</description>
                <description>FIO=FEO</description>
              </item>
               <item>
                <term>-537/11₃</term>
                <description>1210.211002110021</description>
                <description>FIO=FEO</description>
              </item>
            </list>
            </example>
            <seealso cref="M:MathLib.Qb.ToStringExpanded(System.Int32)"/>
        </member>
        <member name="P:MathLib.Q.FractionalPart">
            <value>
            The fractional part of the rational number, obtained by subtracting the integer part.
            </value>
        </member>
        <member name="P:MathLib.Q.NaN">
            <value>
            Represents a NaN (not a number) denoting an invalid number.
            <see cref="P:MathLib.Q.NaN"/> is return value of operations that are not defined (e.g. when dividing by zero)
            </value>
        </member>
        <member name="P:MathLib.Q.Zero">
            <value>
            Represents the rational number zero.
            </value>
        </member>
        <member name="P:MathLib.Q.One">
            <value>
            Represents the rational number one.
            </value>
        </member>
        <member name="M:MathLib.Q.#ctor">
            <summary>
            Initializes a rational number for the default value zero.
            </summary>
        </member>
        <member name="M:MathLib.Q.#ctor(System.Numerics.BigInteger)">
            <summary>
            Initializes a rational number with the specified integer value.
            </summary>
            <param name="numerator">The integer value.</param>
        </member>
        <member name="M:MathLib.Q.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Initializes a rational number with the specified numerator and denominator.
            The rational number is automatically <c>normalized</c>, meaning:
            <para>Q will be simplified so the numerator and denominator is coprime.</para>
            <para>The sign of the number will always be carried by the numerator (denominator will be strictly positive).</para> 
            </summary>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number.</param>
            <returns>A new rational number with the specified <paramref name="numerator"/> and <paramref name="denominator"/> in normalized form.
            <c>iff</c> the denominator is <c>0</c>, <see cref="P:MathLib.Q.NaN"/> is returned.</returns>
        </member>
        <member name="M:MathLib.Q.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean)">
            <summary>
            Protected constructor for a rational number with the specified numerator and denominator.
            </summary>
            <remarks>
            <para>Caution: Setting <paramref name="normalize"/> to <see langword="false"/> will result in a faulty object if any of the following conditions are not met:</para>
            <list type="bullet">
            <item><description>The <paramref name="numerator"/> and <paramref name="denominator"/> are coprime (i.e., their greatest common divisor is 1).</description></item>
            <item><description>The <paramref name="denominator"/> is greater than <c>0</c>.</description></item>
            </list>
            <para>If unsure if above conditions hold, use the public constructor <see cref="M:MathLib.Q.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)"/> instead.</para>
            <para>If you are sure above conditions hold, you can safely set <paramref name="normalize"/> to <see langword="false"/> for significantly faster execution.</para>
            </remarks>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number.</param>
            <param name="normalize"><c>Iff</c> <see langword="true"/>, the rational number will be normalized to its simplest form.</param>
        </member>
        <member name="M:MathLib.Q.#ctor(MathLib.Q)">
            <summary>
            Protected constructor that creates a copy of a Q object.
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:MathLib.Q.PAryInterpretation(System.Boolean,MathLib.BaseInt,MathLib.BaseInt,System.Int32)">
            <summary>
            Returns a <see cref="T:MathLib.Q"/> from the given parts of a base-specific expansion.
            </summary>
            <remarks>
            This method derives the <see cref="P:MathLib.Q.Numerator"/> and <see cref="P:MathLib.Q.Denominator"/> from the given parameters.
            </remarks>
            <param name="negative">A boolean indicating if the number is negative.</param>
            <param name="pAryPreperiodic">The preperiodic part as an integer.</param>
            <param name="pAryPeriodic">The periodic part as an integer.</param>
            <param name="firstExponent">The exponent index of the first coefficient of the number.</param>
            <exception cref="!:ArgumentException">Thrown when the bases of <paramref name="pAryPreperiodic"/> and <paramref name="pAryPeriodic"/> are not equal.</exception>
            <returns>A new <see cref="T:MathLib.Q"/> representing the rational number derived from the given parts.</returns>
        </member>
        <member name="M:MathLib.Q.InBase(System.Int32)">
            <summary>
            Extends the current rational number to a <see cref="T:MathLib.Qb"/> with the specified base.
            </summary>
            <param name="base_">The base to convert to.</param>
            <returns>A new <see cref="T:MathLib.Qb"/> representing the current rational number in the specified base.</returns>
        </member>
        <member name="M:MathLib.Q.ShiftedFractions(System.Int32)">
            <summary>
            Light version of <see cref="M:MathLib.Qb.ShiftedFractions"/> that takes a rational number and a base.
            </summary>
            <remarks>This method does not require the costly creation of a <see cref="T:MathLib.Qb"/>.</remarks>
            <param name="q">A rational number</param>
            <param name="base_">The base</param>
            <returns>An enumerable sequence of rational numbers representing the shifted fractional parts in base <paramref name="base_"/>.</returns>
            <seealso cref="M:MathLib.Qb.ShiftedFractions"/>
        </member>
        <member name="M:MathLib.Q.Coefficients(System.Int32)">
            <summary>
            Light version of <see cref="M:MathLib.Qb.Coefficients"/> that takes a rational number and a base.
            </summary>
            <remarks>This method does not require the costly creation of a <see cref="T:MathLib.Qb"/>.</remarks>
            <param name="q">A rational number</param>
            <param name="base_">The base</param>
            <returns>An enumerable sequence of integers representing the coefficients of <paramref name="q"/> in base <paramref name="base_"/>.</returns>
            <seealso cref = "M:MathLib.Qb.Coefficients" />
            <seealso cref="M:MathLib.Qb.ShiftedFractions"/>
        </member>
        <member name="P:MathLib.Q.Sign">
            <summary>
            Sign of the current rational number.
            </summary>
            <returns>An integer that indicates the sign of the current rational number. 
            Returns -1 if the number is negative, 0 if the number is zero, and 1 if the number is positive.</returns>
        </member>
        <member name="P:MathLib.Q.Reciprocal">
            <summary>
            Reciprocal of this rational number.
            </summary>
            <remarks>
            The reciprocal of a rational number <c>a/b</c> is <c>b/a</c>.
            Returns <see cref="P:MathLib.Q.NaN"/> if the numerator is <c>0</c>.
            </remarks>
        </member>
        <member name="M:MathLib.Q.Negation(System.Boolean)">
            <summary>
            Conditionally negates the current rational number.
            </summary>
            <param name="negate">A boolean value indicating whether to negate the rational number.</param>
            <returns>A new <see cref="T:MathLib.Q"/> representing the negative value if <paramref name="negate"/> is <see langword="true"/>; otherwise, returns the current instance.</returns>
        </member>
        <member name="M:MathLib.Q.op_Increment(MathLib.Q)">
            <summary>
            Increments this rational number by one.
            </summary>
            <param name="a">The rational number to increment.</param>
            <returns>A new rational number representing the result of the increment.</returns>
        </member>
        <member name="M:MathLib.Q.op_Decrement(MathLib.Q)">
            <summary>
            Decrements this rational number by one.
            </summary>
            <param name="a">The rational number to decrement.</param>
            <returns>A new rational number representing the result of the decrement.</returns>
        </member>
        <member name="M:MathLib.Q.op_UnaryNegation(MathLib.Q)">
            <summary>
            Negation of this rational number.
            </summary>
            <param name="a">The rational number to negate.</param>
            <returns>A new rational number representing the negated value.</returns>
        </member>
        <member name="M:MathLib.Q.op_Addition(MathLib.Q,MathLib.Q)">
            <summary>
            Sum of two rational numbers.
            </summary>
            <param name="a">The first term.</param>
            <param name="b">The second term.</param>
            <returns>A new rational number representing the sum of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Subtraction(MathLib.Q,MathLib.Q)">
            <summary>
            Difference of two rational numbers.
            </summary>
            <param name="a">The minuend.</param>
            <param name="b">The subtrahend.</param>
            <returns>A new rational number representing the difference between <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Multiply(MathLib.Q,MathLib.Q)">
            <summary>
            Product of two rational numbers.
            </summary>
            <param name="a">The first factor.</param>
            <param name="b">The second factor.</param>
            <returns>A new rational number representing the product of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Division(MathLib.Q,MathLib.Q)">
            <summary>
            Quotient of two rational numbers.
            </summary>
            <param name="a">The dividend.</param>
            <param name="b">The divisor.</param>
            <returns>A new rational number representing the quotient of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Addition(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Sum of a rational number and an integer.
            </summary>
            <param name="q">A rational number denoting the first term.</param>
            <param name="integer">A <see cref="T:System.Numerics.BigInteger"/> denoting the second term.</param>
            <returns>A new rational number representing the sum of <paramref name="q"/> and <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Addition(System.Numerics.BigInteger,MathLib.Q)">
            <summary>
            Sum of an integer and a rational number.
            </summary>
            <param name="integer">A <see cref="T:System.Numerics.BigInteger"/> denoting the first term.</param>
            <param name="q">A rational number denoting the second term.</param>
            <returns>A new rational number representing the sum of <paramref name="integer"/> and <paramref name="q"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Subtraction(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Difference of a rational number and an integer.
            </summary>
            <param name="q">A rational number denoting the minuend.</param>
            <param name="integer">A <see cref="T:System.Numerics.BigInteger"/> denoting the subtrahend.</param>
            <returns>A new rational number representing the difference of <paramref name="q"/> and <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Subtraction(System.Numerics.BigInteger,MathLib.Q)">
            <summary>
            Difference of an integer and a rational number.
            </summary>
            <param name="integer">A <see cref="T:System.Numerics.BigInteger"/> denoting the minuend.</param>
            <param name="q">A rational number denoting the subtrahend.</param>
            <returns>A new rational number representing the difference of <paramref name="integer"/> and <paramref name="q"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Multiply(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Product of a rational number and an integer.
            </summary>
            <param name="q">A rational number denoting the first factor.</param>
            <param name="integer">A <see cref="T:System.Numerics.BigInteger"/> denoting the second factor.</param>
            <returns>A new rational number representing the product of <paramref name="q"/> and <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Multiply(System.Numerics.BigInteger,MathLib.Q)">
            <summary>
            Product of an integer and a rational number.
            </summary>
            <param name="integer">A <see cref="T:System.Numerics.BigInteger"/> denoting the first factor.</param>
            <param name="q">A rational number denoting the second factor.</param>
            <returns>A new rational number representing the product of <paramref name="integer"/> and <paramref name="q"/> .</returns>
        </member>
        <member name="M:MathLib.Q.op_Division(MathLib.Q,System.Numerics.BigInteger)">
            <summary>
            Quotient of a rational number and an integer.
            </summary>
            <param name="q">A rational number denoting the dividend.</param>
            <param name="integer">A <see cref="T:System.Numerics.BigInteger"/> denoting the divisor.</param>
            <returns>A new rational number representing the quotient of <paramref name="q"/> and <paramref name="integer"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Division(System.Numerics.BigInteger,MathLib.Q)">
            <summary>
            Quotient of am integer and rational number.
            </summary>
            <param name="integer">A <see cref="T:System.Numerics.BigInteger"/> denoting the dividend.</param>
            <param name="q">A rational number denoting the divisor.</param>
            <returns>A new rational number representing the quotient of <paramref name="integer"/> and <paramref name="q"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_Modulus(MathLib.Q,MathLib.Q)">
            <summary>
            Performs the modulus operation on two rational numbers.
            </summary>
            <remarks>
            The formula for the modulus operation is:
            <code>
            (a_n / a_d) % (b_n / b_d) = ((a_n * b_d) % (a_d * b_n)) / (a_d * b_d)
            </code>
            where <c>a_n</c> and <c>a_d</c> are the numerator and denominator of <paramref name="a"/> respectively,
            and <c>b_n</c> and <c>b_d</c> are the numerator and denominator of <paramref name="b"/> respectively.
            </remarks>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The modulus of <paramref name="a"/> and <paramref name="b"/> as a <see cref="T:MathLib.Q"/>.</returns>
        </member>
        <member name="M:MathLib.Q.op_LeftShift(MathLib.Q,System.Int32)">
            <summary>
            Performs a left bitwise shift on the current rational number.
            </summary>
            <remarks>
            If <paramref name="shift"/> is negative, the shift direction will be reversed,
            making this operation equivalent to a right shift. This behavior mirrors the standard
            behavior of the C# operators `&lt;&lt;` and `&gt;&gt;` for integral types, where negative values
            reverse the shift direction.
            </remarks>
            <param name="a">The rational number to shift.</param>
            <param name="shift">The number of bits to shift. A positive value shifts left, a negative value shifts right.</param>
            <returns>A new rational number representing the result of the shift operation.</returns>
        </member>
        <member name="M:MathLib.Q.op_RightShift(MathLib.Q,System.Int32)">
            <summary>
            Performs a right bitwise shift on the current rational number.
            </summary>
            <remarks>
            If <paramref name="shift"/> is negative, the shift direction will be reversed,
            making this operation equivalent to a left shift. This behavior mirrors the standard
            behavior of the C# operators `&lt;&lt;` and `&gt;&gt;` for integral types, where negative values
            reverse the shift direction.
            </remarks>
            <param name="a">The rational number to shift.</param>
            <param name="shift">The number of bits to shift. A positive value shifts right, a negative value shifts left.</param>
            <returns>A new rational number representing the result of the shift operation.</returns>
        </member>
        <member name="M:MathLib.Q.Square">
            <summary>
            Returns the square of the current rational number.
            </summary>
            <returns>A new rational number representing the square of the current rational number.</returns>
        </member>
        <member name="P:MathLib.Q.Abs">
            <summary>
            Gets the absolute value of the current rational number.
            </summary>
            <value>
            A <see cref="T:MathLib.Q"/> representing the absolute value of the current rational number. 
            If the rational number is negative, a new <see cref="T:MathLib.Q"/> instance is returned 
            with the absolute value. If the rational number is non-negative, the current instance is returned.
            </value>
        </member>
        <member name="M:MathLib.Q.Pow(MathLib.Q)">
            <summary>
            Raises the current rational number to the power of the given exponent.
            </summary>
            <param name="exponent">The exponent to which to raise the current rational number.</param>
            <returns>A new rational number representing the result of the exponentiation.</returns>
        </member>
        <member name="M:MathLib.Q.Pow(System.Int32)">
            <summary>
            Raises the current rational number to the power of the given integer exponent.
            </summary>
            <param name="exponent">The integer exponent to which to raise the current rational number.</param>
            <returns>A new rational number representing the result of the exponentiation.</returns>
        </member>
        <member name="M:MathLib.Q.TryCastToInt32(System.Int32@)">
            <summary>
            Attempts to cast the rational number to a 32-bit integer, if possible.
            </summary>
            <param name="result">The resulting 32-bit integer if the cast is successful.</param>
            <returns><see langword="true"/> <c>iff</c> the cast is successful.</returns>
        </member>
        <member name="P:MathLib.Q.IntegralPartAlwaysFEO">
            <summary>
            This version always sets FEO mode.
            </summary>
        </member>
        <member name="M:MathLib.Q.IntegralPartSelective(System.Boolean)">
            <summary>
            This version selects between FIO and FEO mode.
            </summary>
            <remarks>
            This property needs to replace the existing version to come in to effect.
            Current implementation is provided only to give an understanding.
            </remarks>
            <param name="fio">If <see langword="true"/> FIO mode, otherwise FEO mode</param>
        </member>
        <member name="M:MathLib.Q.ToStringCanonical">
            <summary>
            Returns the rational number as a simple canonical representation in base 10.
            </summary>
            <example>
            <code>
            Console.WriteLine(new Q(-4,5).ToStringCanonical()); 
            //outputs "-4/5"
            </code>
            </example>
            <remarks>An <see cref="P:MathLib.Q.NaN"/> rational number will yield the string <c>NaN</c> </remarks>
            <returns>A string representing the rational number (in base 10) in the format "numerator/denominator" or just "numerator" if the denominator is 1.</returns>
        </member>
        <member name="M:MathLib.Q.ToString">
            <summary>Returns the default string representation of the rational number</summary>
        </member>
        <member name="M:MathLib.Q.ToStringFactorization">
            <summary>
            Converts the factorization of the rational number to a string representation.
            </summary>
            <returns>A string representing the factorization of the rational number.</returns>
        </member>
        <member name="T:MathLib.Qb">
            <summary>
            Represents a rational number with a base-dependent expansion, denoted ℚ_b.
            </summary>
            <remarks>
            The class <see cref="T:MathLib.Qb"/> extends <see cref="T:MathLib.Q"/> by adopting a base, and thus defining a base-specific coefficient expansion 
            of the rational number, with a preperiodic and a periodic part. These types of expansions are commonly used in numeral systems 
            like p-ary expansions (e.g. decimal or binary) or in p-adic systems.
            <para>Each number is expressed in terms of a base, denoted by <see cref="P:MathLib.Qb.Base"/>, with a preperiodic part (initial terminating sequence) 
            and a periodic part (repeating sequence).</para>
            <para>Each coefficient is indexed according to the exponent of the base <see cref="P:MathLib.Qb.Base"/>. The index <c>i</c> corresponds to the 
            coefficient <c>c_i</c> associated with the term <c>c_i * Base^i</c>, where the value of <c>i</c> decreases as we move from 
            left to right in the expansion.</para>
            <para>The first (leftmost) coefficient has index <see cref="P:MathLib.Qb.FirstExponent"/>, which corresponds to the largest 
            exponent. The index decreases through the expansion, reflecting the successive exponents of the base, including negative 
            exponents for terms after the radix point (radix point occurs between <c>c_0</c> and <c>c_-1</c>).
            </para>
            <para>
            This consistent indexing system aligns with the mathematical representation of the number as a series in base <see cref="P:MathLib.Qb.Base"/>:
            <c>q = Σ (c_i * <see cref="P:MathLib.Qb.Base"/>^i)</c>
            where the index <c>i</c> decreases from <see cref="P:MathLib.Qb.FirstExponent"/> to negative values as the expansion proceeds.
            </para>
            <para>Overview of concepts and properties, for a full (ultimately periodic) expansion:</para>
            <code>
            Indexes (example):   |-- 7   6   5   4   3   2   1   0  -1  -2  -3  -4  -5  --|  
            Numeric parts:       |-- IntegralPart    --|-- FractionalPart               --|
            Length  properties:  |-- IntegralLength  --|-- FractionalLength             --|
            Numeric parts:       |-- PreperiodicPart               --|-- PeriodicPart   --|         
            Length  properties:  |-- PreperiodicLength             --|-- Period         --|                  
                                 |-- Length                                             --|
            Indexes (Exponents): • (FirstExponent=8)                     • (FirstPeriodicExponent=-2)
                                                                   • (Radix point, after c_0)
            </code>
            <para>The class methods must never throw exceptions for arithmetic operations. Instead, they return <see cref="P:MathLib.Q.NaN"/> for undefined results (such as from divide by zero).</para>
            </remarks>
        </member>
        <member name="P:MathLib.Qb.PreperiodicPart">
            <summary>
            The preperiodic part.
            </summary>
            <remarks>
            Contains the preperiodic coefficients (including zero-padding), and the length of the preperiodic part.
            </remarks>
        </member>
        <member name="P:MathLib.Qb.PeriodicPart">
            <summary>
            The periodic part.
            </summary>
            <remarks>
            Contains the periodic coefficients (including zero-padding), and the period (=length of the periodic part).
            </remarks>
        </member>
        <member name="P:MathLib.Qb.Base">
            <summary>
            Gets the base of the rational number extension.
            </summary>
        </member>
        <member name="P:MathLib.Qb.IntegralLength">
            <summary>
            Length of the integer part (of the base B expansion).
            </summary>
            <remarks>
            <para>This value is simply the base-specific length of <see cref="P:MathLib.Q.IntegralPart"/>.</para>
            <para>Formula:</para>
            <para><see cref="P:MathLib.Qb.IntegralLength"/> = <see cref="P:MathLib.Q.IntegralPart"/>.Length(Base)</para>
            </remarks>
        </member>
        <member name="P:MathLib.Qb.FractionalLength">
            <summary>
            Length of the fractional part (of the base B expansion).
            </summary>
        </member>
        <member name="P:MathLib.Qb.Length">
            <summary>
            Total length of the preperiodic and periodic parts (of the base B expansion).
            </summary>
        </member>
        <member name="P:MathLib.Qb.FirstExponent">
            <summary>
            Index (= exponent value) of the <c>first coefficient</c> (of the base <see cref="P:MathLib.Qb.Base"/> expansion)
            </summary>
            <remarks>
            <para>This value is simply the length of <see cref="P:MathLib.Q.IntegralPart"/> - 1: </para>
            <para>The range of possible values is <c>[-1..∞[</c>, since a number either starts before the radix point, or directly after it.</para>
            The <c>coefficient</c> at index <see cref="P:MathLib.Qb.FirstExponent"/> is the true first coefficient in the expansion, which can be zero <c>iff</c> <see cref="P:MathLib.Qb.FirstExponent"/> is -1.
            <para>Formula: </para>
            <para><see cref="P:MathLib.Qb.FirstExponent"/> = <see cref="P:MathLib.Q.IntegralPart"/>.Length(Base) - 1</para>
            </remarks>
        </member>
        <member name="P:MathLib.Qb.FirstPeriodicExponent">
            <summary>
            Index (= exponent value) of the first coefficient of the periodic part (of the base B expansion).
            </summary>
        </member>
        <member name="P:MathLib.Qb.PreperiodicLength">
            <summary>
            Length of the preperiodic part (of the base B expansion).
            </summary>
        </member>
        <member name="P:MathLib.Qb.Period">
            <summary>
            Length of the periodic part (of the base B expansion).
            </summary>
        </member>
        <member name="P:MathLib.Qb.FullInteger">
            <summary>
            Numeric concatenation of the preperiodic and periodic parts.
            </summary>
        </member>
        <member name="M:MathLib.Qb.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Int32)">
            <summary>
            Constructor for a <see cref="T:MathLib.Qb"/> that takes a numerator, denominator and a base. 
            The rational number is automatically normalized to its simplest form.
            </summary>
            <remarks>If you already have an object of type <see cref="T:MathLib.Q"/>, then the constructor <see cref="M:MathLib.Qb.#ctor(MathLib.Q,System.Int32)"/> will be faster.
            <para>Or alternatively, you can simply call <see cref="M:MathLib.Q.InBase(System.Int32)"/> on the Q instance</para>
            </remarks>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number. Must be non-zero.</param>
            <param name="base_">The base of the rational number extension.</param>
        </member>
        <member name="M:MathLib.Qb.#ctor(System.Boolean,MathLib.BaseInt,MathLib.BaseInt,System.Int32)">
            <summary>
            Constructor that creates a <see cref="T:MathLib.Qb"/> from the defining parts of a base-specific expansion.
            </summary>
            <remarks>
            This constructor will derive the <see cref="P:MathLib.Q.Numerator"/> and <see cref="P:MathLib.Q.Denominator"/> from the parts.
            </remarks>
            <param name="negative">A boolean indicating if the number is negative.</param>
            <param name="prePeriodicPart">The preperiodic part as a <see cref="T:MathLib.BaseInt"/>.</param>
            <param name="periodicPart">The periodic part as a <see cref="T:MathLib.BaseInt"/>>.</param>
            <param name="firstExponent">The exponent index of the first coefficient of the number.</param>
        </member>
        <member name="P:MathLib.Qb.NaN">
            <summary>
            Returns a NaN Qb instance.
            </summary>
        </member>
        <member name="M:MathLib.Qb.#ctor">
            <summary>
            Constructor for a NaN Qb instance.
            </summary>
        </member>
        <member name="M:MathLib.Qb.#ctor(MathLib.Q,System.Int32)">
            <summary>
            Extends a rational number to a Qb extension with the specific base <paramref name="base_"/>.
            </summary>
            <param name="q">A rational number of type <see cref="T:MathLib.Q"/></param>
            <param name="base_">The base of the rational number extension.</param>
        </member>
        <member name="M:MathLib.Qb.ShiftedFractions">
            <summary>
            Returns the left-to-right expansion of the rational number in the specified base as an infinite sequence of fractions. 
            Each fraction corresponds to the fractional part remaining after successive base-specific left shifts.
            </summary>
            <remarks>
            This method first applies a normalization step to the rational number, effectively shifting the radix point to the right (in base <see cref="P:MathLib.Qb.Base"/>),  
            such that the integer part is zero, leaving only the fractional part. The first element of the sequence is 
            this fractional remainder. 
            <para>
            Subsequently, at each step, the fractional part is shifted left by the base (* Base), 
            and the next fractional part is extracted by removing the integer part.
            </para>
            <para>
            This process generates an infinite sequence of fractional remainders, which represent the underlying structure 
            of the rational number in the given base. These fractions can be used to derive coefficients or compute
            the period of the expansion.
            </para>
            </remarks>
            <returns>An enumerable sequence of rational numbers representing the shifted fractional parts in base <see cref="P:MathLib.Qb.Base"/>.</returns>
            <seealse cref="!:Q.BaseShiftRight(int, int)"/>
            <seealso cref="!:Q.BaseShiftLeftSingle(int)"/>
        </member>
        <member name="M:MathLib.Qb.Coefficients">
            <summary>
            Returns the coefficient (or digit) expansion of a rational number in the specified base, expressed as a sequence of integers (modulo b). 
            </summary>
            <remarks>
            The coefficients are obtained from the fractional expansions generated by recursively shifting the radix point of 
            the rational number in base <see cref="P:MathLib.Qb.Base"/>. 
            <para>Specifically, the coefficients are derived by taking the <see cref="M:MathLib.Qb.ShiftedFractions"/> and scaling them to the range <c>[0..<see cref="P:MathLib.Qb.Base"/>-1]</c>.</para>
            <para>Thus, each coefficient is a number modulo <see cref="P:MathLib.Qb.Base"/>.</para>
            </remarks>
            <returns>An enumerable sequence of integers representing the coefficients in base <see cref="P:MathLib.Qb.Base"/>.</returns>
        </member>
        <member name="M:MathLib.Qb.RepetendShiftLeft">
            <summary>
            Returns a new <see cref="T:MathLib.Q"/> with a repetend (interpreted as an integer) that is base shifted 1 step to the left
            compared to the original repetend (interpreted as an integer).
            </summary>
            <returns>A new <see cref="T:MathLib.Q"/> instance with the base-shifted repetend.</returns>
        </member>
        <member name="M:MathLib.Qb.RepetendShiftRight">
            <summary>
            Returns a new <see cref="T:MathLib.Q"/> with a repetend (interpreted as an integer) that is base shifted 1 step to the right
            compared to the original repetend (interpreted as an integer).
            </summary>
            <returns>A new <see cref="T:MathLib.Q"/> instance with the base-shifted repetend.</returns>
        </member>
        <member name="M:MathLib.Qb.Equals(MathLib.Qb)">
            <inheritdoc/>
        </member>
        <member name="M:MathLib.Qb.ToStringExpanded(System.Int32)">
            <summary>
            Converts the current instance of <see cref="T:MathLib.Qb"/> 
            to its expanded string representation in the given base.
            </summary>
            <param name="coefficientCount">The number of coefficients to include, starting from the leftmost. (default=16)</param>
            <returns>The expanded string representation of the current instance of <see cref="T:MathLib.Qb"/>.</returns>
            <remarks>
            The sign of a number is not encoded by (contained in) the expanded representation, since some Q and -Q can have the same string representation.
            However, negative numbers, completes the generation, by enabling us to generate all ultimately periodic expansions, including those that are not covered by the positive rational numbers.
            </remarks>
            <example>
            <list type="table">
              <listheader>
                <term><see cref="T:MathLib.Q"/></term>
                <term>Expansion</term>
                <term>Mode</term>
              </listheader>
              <item>
                <term>0</term>
                <description>.0000000000000000</description>
                <description>FIO=FEO, in any base</description>
              </item>
              <item>
                <term>1₂</term>
                <description>.1111111111111111</description>
                <description>FIO</description>
              </item>
              <item>
                <term>-1₂</term>
                <description>1.000000000000000 </description>
                 <description>FEO</description>
              </item>
              <item>
                <term>103/16₂</term>
                <description>110.0110111111111</description>
                <description>FIO</description>
              </item>
              <item>
                <term>-103/16₂</term>
                <description>110.0111000000000</description>
                <description>FEO</description>
              </item>
              <item>
                <term>5/24₂</term>
                <description>.0011010101010101</description>
                 <description>FIO=FEO</description>
              </item>
              <item>
                <term>-5/24₂</term>
                <description>.0011010101010101</description>
                <description>FIO=FEO</description>
              </item>
              <item>
                <term>3/45₅</term>
                <description>.3333333333333333</description>
                <description>FIO=FEO</description>
              </item>
              <item>
                <term>-3/45₅</term>
                <description>.3333333333333333</description> 
                <description>FIO=FEO</description>
              </item>
              <item>
                <term>537/11₃</term>
                <description>1210.211002110021</description>
                <description>FIO=FEO</description>
              </item>
               <item>
                <term>-537/11₃</term>
                <description>1210.211002110021</description>
                <description>FIO=FEO</description>
              </item>
            </list>
            </example>
        </member>
        <member name="M:MathLib.Qb.ToString">
            <summary>Returns the default string representation of the rational number</summary>
        </member>
        <member name="T:MathLib.Qp">
            <summary>
            Represents the field of ultimately periodic p-adic numbers, denoted ℚₚ in mathematics.
            </summary>
            <remarks>
            ℚₚ is the completion of the rational numbers ℚ with respect to the p-adic norm, defined for a given prime p.
            Each number can be decomposed into a finite preperiodic part and a periodic part in its coefficient expansion. 
            Both parts can be optionally empty.
            <para>
            ℚₚ contains exactly the set ℚ of all rational numbers.
            </para>
            ℚₚ is closed under addition, subtraction, multiplication, and division (excluding division by zero), but it is 
            not algebraically closed. For example, the square root of -1 does not exist in ℚₚ, but it does exist in ℂₚ, 
            the complex p-adic numbers (<see cref="T:MathLib.Cp"/>).
            <para>
            The class <see cref="T:MathLib.Qp"/> represents these ultimately periodic p-adic numbers and can extend to <see cref="T:MathLib.Cp"/> 
            for operations like √-1.
            </para>
            </remarks>
            <example>
            A 5-adic expansion for the rational number -4/3 is:
            <code>
            -4/3 = …2222222212₅
            </code>
            </example>
        </member>
        <member name="P:MathLib.Qp.Generator">
            <summary>
            A reverse generator that can be used to generate the coefficients of the p-adic number, in reverse order (least significant digit first).
            </summary>
        </member>
        <member name="P:MathLib.Qp.Base">
            <summary>
            Returns the prime base of this p-adic number.
            </summary>
        </member>
        <member name="M:MathLib.Qp.FindKQ(MathLib.Q,System.Int32)">
            <summary>
            Decomposes a rational number <paramref name="q"/> into an integer part <c>k</c> and a fractional remainder based on the specified modulus.
            </summary>
            <param name="q">The rational number to decompose, represented as an instance of <see cref="T:MathLib.Q"/>.</param>
            <param name="modulus">The modulus (or base) for the decomposition, which must be a positive integer greater than 1.</param>
            <remarks>
            This method computes the first coefficient <c>k</c> in the p-adic expansion of the rational number <paramref name="q"/> 
            with respect to the specified modulus <paramref name="modulus"/> (which serves as the base of the p-adic expansion).
            The remainder is the fractional part of the number after subtracting the integer part <c>k</c> and dividing by <paramref name="modulus"/>.
            
            Mathematically, this method solves the equation:
            <code>
            q = k + modulus × remainder
            </code>
            where <c>k</c> is an integer in the range [0, <paramref name="modulus"/>) and <c>remainder</c> is the fractional part of <paramref name="q"/> after division by <paramref name="modulus"/>.
            
            The method uses modular arithmetic to compute <c>k</c> efficiently by solving the congruence:
            <code>
            k ≡ q.Numerator × (q.Denominator)⁻¹ (mod modulus)
            </code>
            where <c>q.Denominator⁻¹</c> is the modular inverse of <c>q.Denominator</c> with respect to <paramref name="modulus"/>.
            </remarks>
            <returns>
            A tuple containing:
            <list type="bullet">
            <item><description><c>k</c>: An integer representing the integer component of the decomposition, in the range [0, <paramref name="modulus"/>).</description></item>
            <item><description><c>q</c>: The remaining fractional part of the decomposition, represented as a rational number <see cref="T:MathLib.Q"/>.</description></item>
            </list>
            </returns>
            <example>
            This example demonstrates decomposing a rational number with respect to a modulus:
            <code>
            Q q = new Q(1, 17);
            (int k, Q remainder) = FindKQ(q, 5);
            Console.WriteLine($"k = {k}, remainder = {remainder}");
            // Output: k = 3, remainder = -10 / 17
            </code>
            </example>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="q"/>'s denominator and <paramref name="modulus"/> are not coprime (i.e., their greatest common divisor is not 1).
            </exception>
        </member>
        <member name="M:MathLib.Qp.Valuation">
            <summary>
            p-adic valuation of the current p-adic number.
            </summary>
            <returns>Valuation of the number relative to <see cref="P:MathLib.Qp.Base"/>.</returns>
        </member>
        <member name="P:MathLib.Qp.NaN">
            <summary>
            Returns a NaN Qp instance.
            </summary>
        </member>
        <member name="M:MathLib.Qp.#ctor">
            <summary>
            Constructor for a NaN Qp instance.
            </summary>
        </member>
        <member name="M:MathLib.Qp.#ctor(MathLib.Q,System.Int32)">
            <summary>
             Constructor for a p-adic number.
             </summary>
             <param name="q">The rational number to represent as a p-adic number.</param>
             <param name="base_">The prime base of the p-adic number.</param>
        </member>
        <member name="M:MathLib.Qp.#ctor(MathLib.BaseInt,MathLib.BaseInt,System.Int32)">
            <summary>
            Constructor for a p-adic number for the specified preperiodic and periodic parts, and an optional first exponent.
            </summary>
            <param name="pAdicPreperiodic">The p-adic preperiodic part of the number.</param>
            <param name="pAdicPeriodic">The p-adic periodic part of the number.</param>
            <param name="firstExponent">The first exponent of the number (Default value = <c>0</c>).</param>
        </member>
        <member name="M:MathLib.Qp.Coefficients">
            <summary>
            Constructor for a p-adic number.
            </summary> 
            <param name="generator">A generator that generates the coefficients of the p-adic number.</param>
             <param name="_">A parameter to denote Q is not the value of Qp (but a generator)</param>
        </member>
        <member name="M:MathLib.Qp.ToStringExpanded(System.Int32)">
            <summary>
            Returns a string for the p-adic number in expanded form.
            </summary>
            <param name="coefficientCount">The number of coefficients to include</param>
            <returns></returns>
        </member>
        <member name="M:MathLib.Qp.ToString">
            <summary>
            Default string representation of the p-adic number.
            </summary>
        </member>
        <member name="M:MathLib.Qp.ReciprocalGenerator(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Returns a reverse generator for the p-adic number denoting the reciprocal of a given integer in the base <paramref name="base_"/>.
            </summary>
            <param name="n">The integer to take the reciprocal of</param>
            <param name="base_">The base (p) of the resulting p-adic number</param>
        </member>
        <member name="M:MathLib.Qp.ReciprocalCoefficients(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Generates the p-adic coefficients of the reciprocal of <paramref name="n"/> in the base <paramref name="base_"/>.
            Also returns a remainder with each coefficient.
            </summary>
            <param name="n">The number whose reciprocal's p-adic expansion is computed.</param>
            <param name="base_">The prime base of the p-adic expansion.</param>
            <returns>An enumerable tuple sequence (coefficient, remainder).</returns>
        </member>
    </members>
</doc>
