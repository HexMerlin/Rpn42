<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathLib</name>
    </assembly>
    <members>
        <member name="T:MathLib.Prime.Factorization">
            <summary>
            Represents the result of factoring an integer into its prime factors.
            </summary>
        </member>
        <member name="F:MathLib.Prime.Factorization.PrimeFactors">
            <summary>
            The prime factors of the integer in increasing order.
            </summary>
        </member>
        <member name="F:MathLib.Prime.Factorization.RemainderFactor">
            <summary>
            The remainder factor of the integer after factoring.
            If the input integer was not fully factored, a remainder factor > 1 is left.
            If the input integer was negative, the remainder factor is negative.
            </summary>
        </member>
        <member name="P:MathLib.Prime.Factorization.IsComplete">
            <summary>
            A value indicating whether the factorization is complete to only primes.
            Returns true if the factorization is complete, meaning there is no remainder factor other than 1.
            Returns false if the factorization is partial, meaning there is a remainder factor that could be potentially composite.
            </summary>
        </member>
        <member name="P:MathLib.Prime.Factorization.IsZero">
            <summary>
            Gets a value indicating whether the factored number is 0.
            </summary>
        </member>
        <member name="P:MathLib.Prime.Factorization.IsOne">
            <summary>
            Gets a value indicating whether the factored number is 1.
            </summary>
        </member>
        <member name="P:MathLib.Prime.Factorization.FactorCount">
            <summary>
            The count of factors in the factorization.
            </summary>
        </member>
        <member name="M:MathLib.Prime.Factorization.#ctor(System.Int32[],System.Numerics.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:MathLib.Prime.Factorization"/> class.
            </summary>
            <param name="primeFactors">The prime factors of the integer in increasing order.</param>
            <param name="remainderFactor">The remainder factor of the integer after factoring.</param>
        </member>
        <member name="M:MathLib.Prime.Factorization.Equals(MathLib.Prime.Factorization)">
            <summary>
            Determines whether the specified <see cref="T:MathLib.Prime.Factorization"/> object is equal to the current object.
            </summary>
            <param name="other">The <see cref="T:MathLib.Prime.Factorization"/> object to compare against.</param>
            <returns>true if the objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:MathLib.Prime.Factorization.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:MathLib.Prime.Factorization.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:MathLib.Prime.Factorization.FactoredInteger">
            <summary>
            Gets the factored integer by multiplying all the prime factors with the remainder factor.
            </summary>
        </member>
        <member name="M:MathLib.Prime.Factorization.ToString">
            <summary>
            Returns a string representation of the <see cref="T:MathLib.Prime.Factorization"/> object.
            </summary>
            <returns>A string representation of the <see cref="T:MathLib.Prime.Factorization"/> object.</returns>
        </member>
        <member name="T:MathLib.Prime.PrimeGenerator">
            <summary>
            Provides a method for generating prime numbers using a segmented sieve algorithm.
            </summary>
            <remarks>
            The <see cref="T:MathLib.Prime.PrimeGenerator"/> class uses a segmented sieve algorithm to efficiently generate prime numbers. 
            The algorithm is designed to be cache-friendly by processing primes in segments or "pages", which helps in 
            reducing memory usage and improving performance. This implementation is particularly useful for generating 
            a large number of primes.
            </remarks>
        </member>
        <member name="M:MathLib.Prime.PrimeGenerator.GeneratePrimes">
            <summary>
            Generates an enumerable sequence of prime numbers.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of prime numbers.</returns>
            <remarks>
            This method uses a segmented sieve algorithm to generate prime numbers. The algorithm divides the range 
            of numbers into smaller segments and processes each segment individually. This approach helps in keeping 
            the memory footprint low and improves cache performance.
            
            The first prime number (2) is yielded separately, and subsequent primes are generated and yielded as the 
            algorithm processes each segment.
            </remarks>
        </member>
        <member name="P:MathLib.Q.Mixed">
            <summary>
            Returns the rational number as a mixed number
            </summary>
            <remarks>
            For any non-zero fractional part, the numerator is always <b>Odd</b>
            </remarks>
            <example>
            <code>7/3   →  2 + 1/3</code>
            <code>2/5   →  1 - 3/5</code>
            <code>-5/3  → -2 + 1/3</code>
            <code>13/6  →  2 + 1/6</code>
            </example>
        </member>
        <member name="M:MathLib.Q.op_Modulus(MathLib.Q,MathLib.Q)">
            <summary>
            Performs the modulus operation on two rational numbers
            </summary>
            <remarks>Formula: (an / ad) % (bn / bd) = (an * bd) % (ad * bn) / (ad * bd)</remarks>
            <param name="a">The left operand</param>
            <param name="b">The right operand</param>
            <returns>The modulus of a and b</returns>
        </member>
    </members>
</doc>
